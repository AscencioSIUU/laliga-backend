La Liga Tracker API - Uso y Documentación

Esta API permite gestionar partidos de La Liga. Fue desarrollada en Go usando Gin y se conecta a una base de datos MySQL. La documentación completa de los endpoints se encuentra en el archivo Swagger (swagger.yaml) incluido en el repositorio.

A continuación, se describen los endpoints principales y cómo usarlos:

1. GET /api/matches
   - Descripción: Obtiene una lista de todos los partidos.
   - Ejemplo: Realiza una petición GET a http://localhost:8080/api/matches.
   - Respuesta: Un objeto JSON con la propiedad "matches", que es un arreglo de partidos.

2. GET /api/matches/{id}
   - Descripción: Obtiene un partido específico por su ID.
   - Ejemplo: Realiza una petición GET a http://localhost:8080/api/matches/1.
   - Respuesta: Un objeto JSON con la propiedad "match" que contiene los detalles del partido.

3. POST /api/matches
   - Descripción: Crea un nuevo partido.
   - Ejemplo: Realiza una petición POST a http://localhost:8080/api/matches con el siguiente cuerpo JSON:
     {
       "homeTeam": "Barcelona",
       "awayTeam": "Real Madrid",
       "matchDate": "2025-04-01"
     }
   - Respuesta: Un objeto JSON con la propiedad "match" que incluye el ID generado y los datos del partido.

4. PUT /api/matches/{id}
   - Descripción: Actualiza los datos de un partido existente (por ejemplo, para modificar equipos o fecha).
   - Ejemplo: Realiza una petición PUT a http://localhost:8080/api/matches/1 con el siguiente cuerpo JSON:
     {
       "homeTeam": "Atletico",
       "awayTeam": "Sevilla",
       "matchDate": "2025-05-10"
     }
   - Respuesta: Un objeto JSON con la propiedad "match" mostrando el partido actualizado.

5. DELETE /api/matches/{id}
   - Descripción: Elimina un partido por su ID.
   - Ejemplo: Realiza una petición DELETE a http://localhost:8080/api/matches/1.
   - Respuesta: Un objeto JSON confirmando la eliminación.

6. PATCH /api/matches/{id}/goals
   - Descripción: Incrementa en 1 el número de goles del partido.
   - Ejemplo: Realiza una petición PATCH a http://localhost:8080/api/matches/1/goals (no es necesario enviar cuerpo).
   - Respuesta: Un objeto JSON confirmando que se ha incrementado el valor de goles.

7. PATCH /api/matches/{id}/yellowcards
   - Descripción: Incrementa en 1 el número de tarjetas amarillas.
   - Ejemplo: Realiza una petición PATCH a http://localhost:8080/api/matches/1/yellowcards.
   - Respuesta: Un objeto JSON confirmando que se ha incrementado el valor de tarjetas amarillas.

8. PATCH /api/matches/{id}/redcards
   - Descripción: Incrementa en 1 el número de tarjetas rojas.
   - Ejemplo: Realiza una petición PATCH a http://localhost:8080/api/matches/1/redcards.
   - Respuesta: Un objeto JSON confirmando que se ha incrementado el valor de tarjetas rojas.

9. PATCH /api/matches/{id}/extratime
   - Descripción: Incrementa en 1 el tiempo extra registrado del partido.
   - Ejemplo: Realiza una petición PATCH a http://localhost:8080/api/matches/1/extratime.
   - Respuesta: Un objeto JSON confirmando que se ha incrementado el valor de tiempo extra.

Notas adicionales:
- La API utiliza CORS para permitir solicitudes desde distintos orígenes.
- Las credenciales y otros parámetros de conexión se configuran mediante variables de entorno, pudiendo usarse un archivo .env.
- La documentación completa y detallada de la API se encuentra en el archivo Swagger (swagger.yaml).
- Se recomienda utilizar herramientas como Postman o Hoppscotch para probar los endpoints.
- Para las operaciones PATCH, no es necesario enviar un cuerpo JSON; la lógica del backend incrementa el valor en 1 automáticamente.
